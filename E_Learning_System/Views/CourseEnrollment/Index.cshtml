@using Syncfusion.EJ2

<style>
    .searchField {
        padding: 10px;
        font-size: 17px;
        border: 1px solid grey;
        float: left;
        width: 80%;
        background: #f1f1f1;
    }
    .searchBtn {
        float: left;
        width: 20%;
        padding: 10px;
        background: #2196F3;
        color: white;
        font-size: 17px;
        border: 1px solid grey;
        border-left: none;
        cursor: pointer;
    }
    .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0,0,0); /* Fallback color */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    /* Modal Content */
    .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }

    /* The Close Button */
    .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }
</style>

@Html.EJS().Grid("Grid").DataSource(dataManager =>
{
    dataManager.Url("/CourseEnrollment/UrlDatasource").InsertUrl("/CourseEnrollment/Save").UpdateUrl("/CourseEnrollment/Save").RemoveUrl("/CourseEnrollment/Delete").Adaptor("UrlAdaptor");
}).ActionFailure("actionFailure").ActionComplete("actionComplete").AllowPdfExport().AllowExcelExport().ToolbarClick("toolbarClick").PdfExportComplete("pdfExportComplete").ExcelExportComplete("excelExportComplete").Columns(col =>
{

    col.Field("CourseEnrollmentId").HeaderText("CourseEnrollmentId").IsPrimaryKey(true).Visible(false).Add();
    col.Field("CourseName").HeaderText("CourseName").Add();
    col.Field("StudentName").HeaderText("StudentName").Add();
    col.Field("CourseOfferingId").HeaderText("CourseOfferingId").Visible(false).Add();
    col.Field("StudentId").HeaderText("StudentId").Visible(false).Add();
    col.Field("Grade").HeaderText("Grade").Add();


}).AllowPaging().AllowSorting().AllowFiltering().FilterSettings(fliter => { fliter.Type(Syncfusion.EJ2.Grids.FilterType.Menu); }).AllowPdfExport().AllowExcelExport().PageSettings(page => page.PageSize(10)).EditSettings(edit =>
{ edit.AllowAdding(true).AllowEditing(true).AllowDeleting(true).Mode(Syncfusion.EJ2.Grids.EditMode.Dialog).Template("#dialogtemplate"); }).Toolbar(new List<string>
    () { "Add", "Edit", "Delete", "Print", "PdfExport", "ExcelExport" }).Render()

<script>
    function actionFailure(args) {
        displayErrors(args);
    }
    function displayErrors(err) {
        debugger;
        if (err.error[0].error.status === 400 && IsJsonString(err.error[0].error.responseText)) {
            $('.validErrorMess').remove();
            const validationErrorDictionary = JSON.parse(err.error[0].error.responseText);
            const errors = JSON.parse(validationErrorDictionary).error;
            console.log(errors);
            for (const fieldName in errors) {
                if (fieldName=="") {
                    creatValidationMessage(errors[fieldName]);
                }
                if (errors.hasOwnProperty(fieldName)) {
                    var validationEle = $(".e-gridform .form-row #" + fieldName);
                    var spanEle = document.createElement("span");
                    spanEle.textContent = '*' + errors[fieldName];
                    spanEle.style.color = "red";
                    spanEle.className = "validErrorMess";
                    validationEle.parent().append(spanEle);
                } 
            }
        }
        else {
            creatValidationMessage('* Please Check Your Connection');
        }
    }
    function creatValidationMessage(message) {
        var validationEle = $(".e-edit-dialog");
        var spanEle = document.createElement("span");
        spanEle.textContent = message;
        spanEle.style.color = "red";
        validationEle.append(spanEle);
    }
    function IsJsonString(str) {
        try {
            JSON.parse(str);
        } catch (e) {
            return false;
        }
        return true;
    }
    function toolbarClick(args) {
        var gridObj = document.getElementById("Grid").ej2_instances[0];
        if (args.item.id === 'Grid_pdfexport') {
            var exportProperties = {
                header: {
                    fromTop: 0,
                    height: 80,
                    contents: [
                        {
                            type: 'Text',
                            value: "E-Learning",
                            position: { x: 0, y: 50 },
                            style: { textBrushColor: '#000000', fontSize: 13 }
                        },

                    ]
                },
                footer: {
                    fromBottom: 60,
                    height: 50,
                    contents: [
                        {
                            type: 'PageNumber',
                            pageNumberType: 'english',
                            format: 'Page {$current} of {$total}',
                            position: { x: 0, y: 25 },
                            style: { textBrushColor: '#000000', fontSize: 15 }
                        }
                    ]
                }
            }
            gridObj.showSpinner();
            gridObj.pdfExport(exportProperties);
        }
        else if (args.item.id === 'Grid_excelexport') {
            gridObj.showSpinner();
            gridObj.excelExport();
        }
    }
    function pdfExportComplete(args) {
        this.hideSpinner();
    }
    function excelExportComplete(args) {
        this.hideSpinner();
    }
    function actionComplete(args) {
        console.log(args.rowData);
        if (args.requestType === 'insert') {
            console.log("added");
        }
        if (args.requestType === 'beginEdit') {
            var ajax = new ej.base.Ajax({
                url: "/CourseEnrollment/CreatEditpartial", //render the partial view
                type: "POST",
                contentType: "application/json",
                data: JSON.stringify({ value: args.rowData })
            });
            ajax.send().then(function (data) {
                $("#dialogTemp").html(data); //Render the edit form with selected record
            }).catch(function (xhr) {
                console.log("error");
                console.log(xhr);
            });
        }
        if (args.requestType === 'add') {
            var ajax = new ej.base.Ajax({
                url: "/CourseEnrollment/CreatEditpartial", //render the partial view
                type: "POST",
                contentType: "application/json",
            });
            ajax.send().then(function (data) {
                $("#dialogTemp").html(data); //Render the edit form with selected record
                args.form.elements.namedItem().focus();
            }).catch(function (xhr) {
                console.log(xhr);
            });
        }
    }
</script>

<script id='dialogtemplate' type="text/x-template">
    <div id="dialogTemp">
    </div>
</script>
